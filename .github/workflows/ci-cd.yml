name: CI/CD Pipeline
# Force fresh run after coverage configuration fixes

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      skip_cache:
        description: 'Skip all caches (forces fresh run)'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: "3.13"

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]
        os: [ubuntu-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: ${{ github.event.inputs.skip_cache != 'true' }}

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
      
    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Run linting and formatting
      run: |
        uv run ruff check .
        uv run ruff format --check .

    - name: Run type checking
      run: |
        uv run mypy .
        # TODO: Re-enable pyright after fixing 510 type errors - see issue #16
        # uv run pyright src tests
        
    - name: Run security checks
      run: |
        uv run bandit -r src/devhub --skip=B101,B603,B607,B105,B404,B310
        uv run safety check
      if: matrix.os == 'ubuntu-latest'
        
    - name: Run tests with coverage
      run: uv run pytest --cov=devhub --cov-report=xml --cov-report=term-missing
      # TODO: Re-enable --cov-fail-under=90 after addressing coverage in dedicated PR
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
  build:
    name: Build distribution packages
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
      
    - name: Build packages
      run: uv build
      
    - name: Check package integrity
      run: uv run twine check dist/*
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
        retention-days: 30

  installation-test:
    name: Test installation methods
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/
        
    - name: Test wheel installation
      run: |
        uv venv test-env --python 3.13
        source test-env/bin/activate
        pip install dist/*.whl
        devhub --version
        devhub --help
        
    - name: Test source installation
      run: |
        uv venv test-source-env --python 3.13
        source test-source-env/bin/activate
        pip install dist/*.tar.gz
        devhub --version
        devhub --help
        
    - name: Test uv installation from local
      run: |
        uv tool install --force ./dist/*.whl
        ~/.local/bin/devhub --version
        ~/.local/bin/devhub --help